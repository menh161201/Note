// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  folders       Folder[]
  notes         Note[]
  tags          Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Folder {
  id           String   @id @default(cuid())
  title        String   
  notes        Note[]
  isStarred    Boolean  @default(false)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  @@unique([userId, title])
}

model Note {
  id           String   @id @default(cuid())
  title        String
  content      String
  isFavorited  Boolean  @default(false)   
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId     String
  folder       Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  tags         Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
} 


model Tag {
  id           String   @id @default(cuid())
  name         String   
  notes        Note[]
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)   
  @@unique([userId, name])  
}